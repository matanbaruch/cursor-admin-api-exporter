name: Tests

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write
  checks: write

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".github/workflows/docs.yml"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".github/workflows/docs.yml"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
      coverage-badge-color: ${{ steps.coverage.outputs.badge-color }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download dependencies
        run: go mod download

      - name: Make test script executable
        run: chmod +x scripts/run-tests.sh

      - name: Run unit tests
        run: ./scripts/run-tests.sh unit

      - name: Extract coverage percentage
        id: coverage
        run: |
          if [ -f coverage.out ]; then
            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Current coverage: $COVERAGE%"
            
            # Determine badge color based on coverage
            if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              echo "badge-color=brightgreen" >> $GITHUB_OUTPUT
            elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              echo "badge-color=yellow" >> $GITHUB_OUTPUT
            else
              echo "badge-color=red" >> $GITHUB_OUTPUT
            fi
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
            echo "badge-color=red" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
          retention-days: 7

  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download dependencies
        run: go mod download

      - name: Make test script executable
        run: chmod +x scripts/run-tests.sh

      - name: Get current PR coverage
        id: pr-coverage
        run: |
          ./scripts/run-tests.sh unit
          if [ -f coverage.out ]; then
            PR_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            echo "pr-coverage=$PR_COVERAGE" >> $GITHUB_OUTPUT
            echo "PR Coverage: $PR_COVERAGE%"
          else
            echo "pr-coverage=0" >> $GITHUB_OUTPUT
            echo "PR Coverage: 0%"
          fi

      - name: Get base branch coverage
        id: base-coverage
        run: |
          git checkout ${{ github.event.pull_request.base.sha }}
          ./scripts/run-tests.sh unit
          if [ -f coverage.out ]; then
            BASE_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            echo "base-coverage=$BASE_COVERAGE" >> $GITHUB_OUTPUT
            echo "Base Coverage: $BASE_COVERAGE%"
          else
            echo "base-coverage=0" >> $GITHUB_OUTPUT
            echo "Base Coverage: 0%"
          fi

      - name: Calculate coverage difference
        id: coverage-diff
        run: |
          PR_COV="${{ steps.pr-coverage.outputs.pr-coverage }}"
          BASE_COV="${{ steps.base-coverage.outputs.base-coverage }}"
          
          DIFF=$(echo "$PR_COV - $BASE_COV" | bc -l)
          echo "coverage-diff=$DIFF" >> $GITHUB_OUTPUT
          
          THRESHOLD=-0.5
          DECREASED=$(echo "$DIFF < $THRESHOLD" | bc -l)
          echo "coverage-decreased=$DECREASED" >> $GITHUB_OUTPUT
          
          echo "Coverage Difference: $DIFF%"
          echo "Coverage Decreased: $DECREASED"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download dependencies
        run: go mod download

      - name: Make test script executable
        run: chmod +x scripts/run-tests.sh

      - name: Run integration tests
        env:
          CURSOR_API_TOKEN: ${{ secrets.CURSOR_API_TOKEN }}
        run: ./scripts/run-tests.sh integration

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download dependencies
        run: go mod download

      - name: Make test script executable
        run: chmod +x scripts/run-tests.sh

      - name: Run performance tests
        run: ./scripts/run-tests.sh performance

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Start services
        env:
          CURSOR_API_TOKEN: ${{ secrets.CURSOR_API_TOKEN }}
        run: docker compose up -d

      - name: Wait for exporter to be ready
        run: sleep 10

      - name: Check metrics endpoint
        run: |
          curl -sSf http://localhost:8080/metrics

  helm-chart-test:
    name: Helm Chart Test
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: cursor-test

      - name: Build Docker image
        run: |
          docker build -t cursor-admin-api-exporter:test .
          kind load docker-image cursor-admin-api-exporter:test --name cursor-test

      - name: Create values override file
        run: |
          cat > test-values.yaml << EOF
          image:
            repository: cursor-admin-api-exporter
            tag: test
            pullPolicy: Never
          cursor:
            apiToken: ${{ secrets.CURSOR_API_TOKEN }}
            apiUrl: "https://api.cursor.com"
          EOF

      - name: Bake helm chart
        uses: azure/k8s-bake@v3
        with:
          renderEngine: "helm"
          helmChart: "./charts/cursor-admin-api-exporter/"
          overrideFiles: "test-values.yaml"
          releaseName: "cursor-test"
          helm-version: "latest"
        id: bake

      - name: Deploy to kind cluster
        uses: Azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: default

      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/cursor-test-cursor-admin-api-exporter

      - name: Test metrics endpoint
        run: |
          kubectl port-forward deployment/cursor-test-cursor-admin-api-exporter 8080:8080 &
          sleep 5
          curl -s http://localhost:8080/metrics
          pkill -f "kubectl port-forward" || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        coverage-gate,
        integration-tests,
        performance-tests,
        docker-compose-test,
        helm-chart-test,
      ]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Gate | ${{ needs.coverage-gate.result == 'success' && '✅ Passed' || needs.coverage-gate.result == 'skipped' && '⏭️ Skipped (Push to main)' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || needs.integration-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Compose Test | ${{ needs.docker-compose-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Helm Chart Test | ${{ needs.helm-chart-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add coverage information if available
          if [ -n "${{ needs.unit-tests.outputs.coverage-percentage }}" ]; then
            echo "### Coverage Information" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage:** ${{ needs.unit-tests.outputs.coverage-percentage }}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ${{ needs.unit-tests.outputs.coverage-badge-color == 'brightgreen' && '✅ Excellent' || needs.unit-tests.outputs.coverage-badge-color == 'yellow' && '⚠️ Needs Improvement' || '❌ Poor' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" && "${{ needs.integration-tests.result }}" != "skipped" ]] || \
             [[ "${{ needs.performance-tests.result }}" != "success" ]] || \
             [[ "${{ needs.docker-compose-test.result }}" != "success" ]] || \
             [[ "${{ needs.helm-chart-test.result }}" != "success" ]]; then
            echo "❌ Some tests failed! Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All critical tests passed!" >> $GITHUB_STEP_SUMMARY
          fi